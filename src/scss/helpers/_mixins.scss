@use "sass:list";
@use "sass:math";
@use '../variables/flexProperties' as p;

@mixin pseudo($pseudo, $content, $pos) {
    position: relative;
    &::#{$pseudo} {
        content: $content;
        position: $pos;
        @content;
    }
}
@mixin before($content: "", $pos: absolute) {
    @include pseudo(before, $content, $pos) {
        @content;
    }
}
@mixin after($content: "", $pos: absolute) {
    @include pseudo(after, $content, $pos) {
        @content;
    }
}
@mixin before-after($content: "", $pos: absolute) {
    @include pseudo(before, $content, $pos) {
        @content;
    }
    @include pseudo(after, $content, $pos) {
        @content;
    }
}
@mixin flex-builder($x, $y, $direction) {
    %flex-#{$x}-#{$y}-#{$direction} {
        display: flex;
        @if ($x != null and $y != null) {
            justify-content: $x;
            align-items: $y;
        } @else if($x != null) {
            justify-content: $x;
        } @else if($y != null) {
            align-items: $y;
        }
        @if ($direction != null) {
            flex-direction: $direction;
        }
    }
}
@mixin flex($x: null, $y: $x, $direction: null) {
    @if not list.index(p.$justify-content, $x) {
        @error "justify-content: #{$x}; does not exist !!!";
    } @else if not list.index(p.$align-items, $y) {
        @error "align-items: #{$y}; does not exist !!!";
    } @else if not list.index(p.$flex-direction, $direction) {
        @error "flex-direction: #{$direction}; does not exist !!!";
    }
    @extend %flex-#{$x}-#{$y}-#{$direction};
    @content;
}
@mixin center($hadPosition: false) {
    @if not $hadPosition {
        position: absolute;
    }
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}
@mixin center-x($hadPosition: false) {
    @if not $hadPosition {
        position: absolute;
    }
    left: 50%;
    transform: translateX(-50%);
}
@mixin center-y($hadPosition: true) {
    @if not $hadPosition {
        position: absolute;
    }
    top: 50%;
    transform: translateY(-50%);
}
@mixin size($width: null, $height: $width) {
    @if ($width != null and $height != null) {
        width: $width;
        height: $height;
    } @else if($width != null) {
        width: $width;
    } @else if($height != null) {
        height: $height;
    }
}
@mixin max-size($width: null, $height: $width) {
    @if ($width != null and $height != null) {
        max-width: $width;
        max-height: $height;
    } @else if($width != null) {
        max-width: $width;
    } @else if($height != null) {
        max-height: $height;
    }
}
@mixin min-size($width: null, $height: $width) {
    @if ($width != null and $height != null) {
        min-width: $width;
        min-height: $height;
    } @else if($width != null) {
        min-width: $width;
    } @else if($height != null) {
        min-height: $height;
    }
}
@mixin aspect-ratio($width: null, $ratio: 1,$useCssCalc: false) {
    //Dont use numbers who had percentage !!!
    @if ($width == null) {
		@error $width + " / null width is unallowed";
    } @else if ($ratio == null or $ratio == 0){
		@error "null/zero ratio is unallowed";
	} @else if($useCssCalc){
		width: $width;
		height:calc(#{$width} / #{$ratio});
	} @else{	
		width: $width;
		height: math.div($width,$ratio);
	}
}
@mixin mq($screen, $attr: min) {
    @if ($attr != max and $attr != min) {
        @error "#{$attr} not acceptable, use max or min";
    }
    @media (#{$attr}-width: #{$screen}) {
        @content;
    }
}